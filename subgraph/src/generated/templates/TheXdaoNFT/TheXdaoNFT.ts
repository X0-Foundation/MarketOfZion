// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CollectionNameUpdated extends ethereum.Event {
  get params(): CollectionNameUpdated__Params {
    return new CollectionNameUpdated__Params(this);
  }
}

export class CollectionNameUpdated__Params {
  _event: CollectionNameUpdated;

  constructor(event: CollectionNameUpdated) {
    this._event = event;
  }

  get collection_name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CollectionPublicUpdated extends ethereum.Event {
  get params(): CollectionPublicUpdated__Params {
    return new CollectionPublicUpdated__Params(this);
  }
}

export class CollectionPublicUpdated__Params {
  _event: CollectionPublicUpdated;

  constructor(event: CollectionPublicUpdated) {
    this._event = event;
  }

  get isPublic(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class CollectionUriUpdated extends ethereum.Event {
  get params(): CollectionUriUpdated__Params {
    return new CollectionUriUpdated__Params(this);
  }
}

export class CollectionUriUpdated__Params {
  _event: CollectionUriUpdated;

  constructor(event: CollectionUriUpdated) {
    this._event = event;
  }

  get collection_uri(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class ItemCreated extends ethereum.Event {
  get params(): ItemCreated__Params {
    return new ItemCreated__Params(this);
  }
}

export class ItemCreated__Params {
  _event: ItemCreated;

  constructor(event: ItemCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get royalty(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenUriUpdated extends ethereum.Event {
  get params(): TokenUriUpdated__Params {
    return new TokenUriUpdated__Params(this);
  }
}

export class TokenUriUpdated__Params {
  _event: TokenUriUpdated;

  constructor(event: TokenUriUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TheXdaoNFT__ItemsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: string, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class TheXdaoNFT extends ethereum.SmartContract {
  static bind(address: Address): TheXdaoNFT {
    return new TheXdaoNFT("TheXdaoNFT", address);
  }

  FEE_MAX_PERCENT(): BigInt {
    let result = super.call(
      "FEE_MAX_PERCENT",
      "FEE_MAX_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FEE_MAX_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_MAX_PERCENT",
      "FEE_MAX_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FEE_MIN_PERCENT(): BigInt {
    let result = super.call(
      "FEE_MIN_PERCENT",
      "FEE_MIN_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FEE_MIN_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_MIN_PERCENT",
      "FEE_MIN_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Items(param0: BigInt): TheXdaoNFT__ItemsResult {
    let result = super.call(
      "Items",
      "Items(uint256):(uint256,address,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TheXdaoNFT__ItemsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt()
    );
  }

  try_Items(param0: BigInt): ethereum.CallResult<TheXdaoNFT__ItemsResult> {
    let result = super.tryCall(
      "Items",
      "Items(uint256):(uint256,address,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TheXdaoNFT__ItemsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt()
      )
    );
  }

  PERCENTS_DIVIDER(): BigInt {
    let result = super.call(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENTS_DIVIDER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addItem(_tokenURI: string, royalty: BigInt): BigInt {
    let result = super.call("addItem", "addItem(string,uint256):(uint256)", [
      ethereum.Value.fromString(_tokenURI),
      ethereum.Value.fromUnsignedBigInt(royalty)
    ]);

    return result[0].toBigInt();
  }

  try_addItem(_tokenURI: string, royalty: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addItem", "addItem(string,uint256):(uint256)", [
      ethereum.Value.fromString(_tokenURI),
      ethereum.Value.fromUnsignedBigInt(royalty)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collection_name(): string {
    let result = super.call(
      "collection_name",
      "collection_name():(string)",
      []
    );

    return result[0].toString();
  }

  try_collection_name(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "collection_name",
      "collection_name():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  collection_uri(): string {
    let result = super.call("collection_uri", "collection_uri():(string)", []);

    return result[0].toString();
  }

  try_collection_uri(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "collection_uri",
      "collection_uri():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creatorOf(_tokenId: BigInt): Address {
    let result = super.call("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_creatorOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentID(): BigInt {
    let result = super.call("currentID", "currentID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentID", "currentID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionName(): string {
    let result = super.call(
      "getCollectionName",
      "getCollectionName():(string)",
      []
    );

    return result[0].toString();
  }

  try_getCollectionName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getCollectionName",
      "getCollectionName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCollectionURI(): string {
    let result = super.call(
      "getCollectionURI",
      "getCollectionURI():(string)",
      []
    );

    return result[0].toString();
  }

  try_getCollectionURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getCollectionURI",
      "getCollectionURI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublic(): boolean {
    let result = super.call("isPublic", "isPublic():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPublic(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublic", "isPublic():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royalties(_tokenId: BigInt): BigInt {
    let result = super.call("royalties", "royalties(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_royalties(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royalties", "royalties(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddItemCall extends ethereum.Call {
  get inputs(): AddItemCall__Inputs {
    return new AddItemCall__Inputs(this);
  }

  get outputs(): AddItemCall__Outputs {
    return new AddItemCall__Outputs(this);
  }
}

export class AddItemCall__Inputs {
  _call: AddItemCall;

  constructor(call: AddItemCall) {
    this._call = call;
  }

  get _tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get royalty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddItemCall__Outputs {
  _call: AddItemCall;

  constructor(call: AddItemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get creator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get bPublic(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCollectionURICall extends ethereum.Call {
  get inputs(): SetCollectionURICall__Inputs {
    return new SetCollectionURICall__Inputs(this);
  }

  get outputs(): SetCollectionURICall__Outputs {
    return new SetCollectionURICall__Outputs(this);
  }
}

export class SetCollectionURICall__Inputs {
  _call: SetCollectionURICall;

  constructor(call: SetCollectionURICall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetCollectionURICall__Outputs {
  _call: SetCollectionURICall;

  constructor(call: SetCollectionURICall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get newname(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetPublicCall extends ethereum.Call {
  get inputs(): SetPublicCall__Inputs {
    return new SetPublicCall__Inputs(this);
  }

  get outputs(): SetPublicCall__Outputs {
    return new SetPublicCall__Outputs(this);
  }
}

export class SetPublicCall__Inputs {
  _call: SetPublicCall;

  constructor(call: SetPublicCall) {
    this._call = call;
  }

  get bPublic(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPublicCall__Outputs {
  _call: SetPublicCall;

  constructor(call: SetPublicCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
